/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface NFTFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "computeAddress" | "deployNFT"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NFTDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "computeAddress",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNFT",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployNFT", data: BytesLike): Result;
}

export namespace NFTDeployedEvent {
  export type InputTuple = [nftAddress: AddressLike, owner: AddressLike];
  export type OutputTuple = [nftAddress: string, owner: string];
  export interface OutputObject {
    nftAddress: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTFactory extends BaseContract {
  connect(runner?: ContractRunner | null): NFTFactory;
  waitForDeployment(): Promise<this>;

  interface: NFTFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  computeAddress: TypedContractMethod<
    [_mintPrice: BigNumberish, owner: AddressLike, _nounce: BytesLike],
    [string],
    "view"
  >;

  deployNFT: TypedContractMethod<
    [owner: AddressLike, _mintPrice: BigNumberish, _nounce: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "computeAddress"
  ): TypedContractMethod<
    [_mintPrice: BigNumberish, owner: AddressLike, _nounce: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "deployNFT"
  ): TypedContractMethod<
    [owner: AddressLike, _mintPrice: BigNumberish, _nounce: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NFTDeployed"
  ): TypedContractEvent<
    NFTDeployedEvent.InputTuple,
    NFTDeployedEvent.OutputTuple,
    NFTDeployedEvent.OutputObject
  >;

  filters: {
    "NFTDeployed(address,address)": TypedContractEvent<
      NFTDeployedEvent.InputTuple,
      NFTDeployedEvent.OutputTuple,
      NFTDeployedEvent.OutputObject
    >;
    NFTDeployed: TypedContractEvent<
      NFTDeployedEvent.InputTuple,
      NFTDeployedEvent.OutputTuple,
      NFTDeployedEvent.OutputObject
    >;
  };
}
