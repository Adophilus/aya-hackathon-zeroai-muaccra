/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AgentTemplateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addDocument"
      | "createIndex"
      | "getDocumentCIDByURI"
      | "getIndexInfo"
      | "getURIByDocumentCID"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDocument",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "createIndex", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDocumentCIDByURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getURIByDocumentCID",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentCIDByURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getURIByDocumentCID",
    data: BytesLike
  ): Result;
}

export interface AgentTemplate extends BaseContract {
  connect(runner?: ContractRunner | null): AgentTemplate;
  waitForDeployment(): Promise<this>;

  interface: AgentTemplateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addDocument: TypedContractMethod<
    [uri: string, documentCID: string],
    [void],
    "nonpayable"
  >;

  createIndex: TypedContractMethod<[indexName: string], [void], "nonpayable">;

  getDocumentCIDByURI: TypedContractMethod<[uri: string], [string], "view">;

  getIndexInfo: TypedContractMethod<
    [],
    [
      [string, bigint, bigint] & {
        name: string;
        version: bigint;
        count: bigint;
      }
    ],
    "view"
  >;

  getURIByDocumentCID: TypedContractMethod<[cid: string], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addDocument"
  ): TypedContractMethod<
    [uri: string, documentCID: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createIndex"
  ): TypedContractMethod<[indexName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDocumentCIDByURI"
  ): TypedContractMethod<[uri: string], [string], "view">;
  getFunction(
    nameOrSignature: "getIndexInfo"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint] & {
        name: string;
        version: bigint;
        count: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getURIByDocumentCID"
  ): TypedContractMethod<[cid: string], [string], "view">;

  filters: {};
}
